"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[48],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>N});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},R=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(t),R=l,N=d["".concat(p,".").concat(R)]||d[R]||m[R]||r;return t?a.createElement(N,i(i({ref:n},c),{},{components:t})):a.createElement(N,i({ref:n},c))}));function N(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=R;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[d]="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}R.displayName="MDXCreateElement"},551:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=t(7462),l=(t(7294),t(4137));const r={id:"learn",sidebar_position:1,title:"Learn"},i=void 0,o={unversionedId:"Prepare/learn",id:"Prepare/learn",title:"Learn",description:"Installation",source:"@site/docs/2-Prepare/1-Learn.md",sourceDirName:"2-Prepare",slug:"/Prepare/learn",permalink:"/solution-mq-aws-eks/Prepare/learn",draft:!1,editUrl:"https://github.com/ibm-client-engineering/solution-mq-aws-eks.git/docs/2-Prepare/1-Learn.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"learn",sidebar_position:1,title:"Learn"},sidebar:"tutorialSidebar",previous:{title:"Prepare",permalink:"/solution-mq-aws-eks/category/prepare"},next:{title:"Organize",permalink:"/solution-mq-aws-eks/Prepare/organize"}},p={},s=[{value:"Installation",id:"installation",level:3}],c={toc:s},d="wrapper";function m(e){let{components:n,...t}=e;return(0,l.kt)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"installation"},"Installation"),(0,l.kt)("p",null,"Add the helm chart to your repo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'helm repo add ibm-messaging-mq https://ibm-client-engineering.github.io/mq-helm-eks/\n"mq-helm-eks" has been added to your repositories\n')),(0,l.kt)("p",null,"Show all the charts in that repo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"helm show chart mq-helm-eks/ibm-mq\n\napiVersion: v2\nappVersion: 9.3.1.0\ndescription: IBM MQ queue manager\nicon: https://raw.githubusercontent.com/IBM/charts/master/logo/ibm-mq-blue-icon.png\nkeywords:\n- IBM MQ\n- MQ\n- amd64\n- message queue\n- Integration\nkubeVersion: '>=1.18.0-0'\nname: ibm-mq\ntype: application\nversion: 4.0.0\n")),(0,l.kt)("p",null,"Create the following yamls"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"mtlsqm.yaml")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: helmsecure\n  namespace: mq-eks\ndata:\n  mq.mqsc: |-\n    DEFINE QLOCAL('APPQ') DEFPSIST(YES)\n    DEFINE CHANNEL(MTLSQMCHL) CHLTYPE(SVRCONN) TRPTYPE(TCP) SSLCAUTH(REQUIRED) SSLCIPH('ANY_TLS12_OR_HIGHER')\n    ALTER AUTHINFO(SYSTEM.DEFAULT.AUTHINFO.IDPWOS) AUTHTYPE(IDPWOS) ADOPTCTX(YES) CHCKCLNT(OPTIONAL) CHCKLOCL(OPTIONAL) AUTHENMD(OS)\n    SET CHLAUTH('MTLSQMCHL') TYPE(SSLPEERMAP) SSLPEER('CN=application1,OU=app team1') USERSRC(MAP) MCAUSER('app1') ACTION(ADD)\n    REFRESH SECURITY TYPE(CONNAUTH)\n    SET AUTHREC PRINCIPAL('app1') OBJTYPE(QMGR) AUTHADD(CONNECT,INQ)\n    SET AUTHREC PROFILE('APPQ') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,DSP,GET,INQ,PUT)\n    SET AUTHREC PROFILE('SYSTEM.ADMIN.COMMAND.QUEUE') OBJTYPE(QUEUE) PRINCIPAL('app1') AUTHADD(DSP, INQ, PUT)\n    SET AUTHREC PROFILE('SYSTEM.MQEXPLORER.REPLY.MODEL') OBJTYPE(QUEUE) PRINCIPAL('app1') AUTHADD(DSP, INQ, GET, PUT)\n    SET AUTHREC PROFILE('**') OBJTYPE(AUTHINFO) PRINCIPAL('app1') AUTHADD(ALLADM, CRT)\n    SET AUTHREC PROFILE('**') OBJTYPE(CHANNEL) PRINCIPAL('app1') AUTHADD(ALLADM, CRT)\n    SET AUTHREC PROFILE('**') OBJTYPE(CLNTCONN) PRINCIPAL('app1') AUTHADD(ALLADM, CRT)\n    SET AUTHREC PROFILE('**') OBJTYPE(COMMINFO) PRINCIPAL('app1') AUTHADD(ALLADM, CRT)\n    SET AUTHREC PROFILE('**') OBJTYPE(LISTENER) PRINCIPAL('app1') AUTHADD(ALLADM, CRT)\n    SET AUTHREC PROFILE('**') OBJTYPE(NAMELIST) PRINCIPAL('app1') AUTHADD(ALLADM, CRT)\n    SET AUTHREC PROFILE('**') OBJTYPE(PROCESS) PRINCIPAL('app1') AUTHADD(ALLADM, CRT)\n    SET AUTHREC OBJTYPE(QMGR) PRINCIPAL('app1') AUTHADD(ALLADM, CONNECT, INQ)\n    SET AUTHREC PROFILE('**') OBJTYPE(SERVICE) PRINCIPAL('app1') AUTHADD(ALLADM, CRT)\n    SET AUTHREC PROFILE('**') OBJTYPE(TOPIC) PRINCIPAL('app1') AUTHADD(ALLADM, CRT, ALLMQI)\n  mq.ini: |-\n    Service:\n      Name=AuthorizationService\n      EntryPoints=14\n      SecurityPolicy=UserExternal\n---\nkind: Secret\napiVersion: v1\nmetadata:\n  name: helmsecure\n  namespace: mq-eks\ndata:\n  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRGJpMHAwNEhRM2NCWEoKNisvZTFiZFBmcXdZMGlZTVRBMVVyYXJhd1VmaVBkZy9hVXJsYmxHUFpiVGRxbDZJNGx0SVVMbkdvcEFJRTNHZQpFSjdaZmg4Y09MNVNOVUlSUC9IQUFzK3gybnVCdldqZ1J5bmpib2JodmJ2U1M5RTlLaHJrZ2YydnlVWDRoamZYCkRBU3dvakN3dDQ4bWJEWlptd1psNkVuSVpZa2Q1QlZlblIvbkQ0UWtha00xOGxoZWdHWGhnL2I3ZDcxNUY5ODAKSU1xYlg5WjFKUTdFRVRsTkc0cDBnbzQ5djNIYXdoQVZMQXZXdWNoMkozblRpWWI0WWhEcmJheGRYUDZMNXVEcgpHb1ZqdnJMUVRNNUlYRGpEdmVBMTY1TlB4U1VPNFdwaVo3V3ZLcGFjNWw0VkIreXZtZ0c2VEtTakJlTEFER29WCkVLNEU2WEpmQWdNQkFBRUNnZ0VBUXN0UEhONEpIYkRCUUV6RER2WFFycVBvY2lqRm9Lb215Q09LUHNIZFArejIKOU52eENIcVczOXpldVM0VFV1d2pQNDRuNTFJZ0pnVGNaVzNERm9LenJsOXBNQk82QlF1Q1hwdThXdTBROUhrUApCbVZBVGt5YlJ1VDExdFp3VTM2UzdnREtrUWZZZlBOQTIvRnhIOWhJbmd0S3h6TFhHazM3RlZnbDBvMXB1U2pTCk9WbDdGUDNxV05kUlF1R3M3UnA0ajRGdEJNbW1SS1hEeUtDN0dOdkJiaUdQNXQ2b043RXcrQkZFWHpEQ3JhZGsKY1JRc1VRQmQ2MDNQMDlmaXEyOW9Hbk1ITG1iWlBocVNtcTdoRHNJNEV1ZUlZckt0YTNhNndQSVdGWW1ST1lDbwpXM1Z6endmUkV5WUZNYmVBdmdCaWRKQ3JSdm9Oem5ZU0xUYzNGTUJUcVFLQmdRRHlRM2tvY3orUGxXNFFnZklEClJlbCtTVmZNcFZOSEVZaTBrYmlUWERTS3FoQmpNMWNlU2loY2lyNUZpbnBQUVVrRW5aU1F5c0hZbjJISlRKeXMKM1NzOEU1U3YzejdxRnpiNHB5TlpIVFJaNHMxNWowUGs2TUNKNnpZNS9TNzFOU3c1TVIzK1IyTWI2OVhNWkNGdgp5T2ZOakJEK1hSRmpuUFdvbm5KcjVwUTJtd0tCZ1FEbi9nbTBlaTQ2bVdvejRidzExZVhVejZBQm9qUzBEZXB5CmlwOVRNKy9PL0RxcEsvVkVhYy9nUWpNb1JvaVV1TEplMDJXTFNUcHJSMk5RY1hZNWNoOFpCVnhaTmlkVUkzNmkKWkRsZi93K3ZKMmcwTXM4NFNiWnNjWXlGSHk3aTF4cGFpOFNZdWZldEZmZHByTHREOEs3djAxZk96RmFhZWxVaQpESFdBd3R5TmpRS0JnRzgreUkzb2poRlMzdDI1cmZZT3ptOXRJbUlZc0tyN3hEaVdpWmt4Ui9jOHJKWEE1NHBECkoxR0hiR1BtZU0rWC9QMmZscTcrVEJFNjd0NU96Y3NiTEZWRDhJenFDS3ZaeVNaWktZUXNRdlBiajlyNERJYzYKMGQ4RElUMXpvM0o1M2pyTThTYm9oUHczU1UrMzB4clB1SkhNZGFrMzkxbzBveUd3MEgzM3ZhdHRBb0dBQ3NoTgozeXVHbG9hbTN2NXc1dmVvRlBvSmI4b0FOUllvZldaZi9WZituMW90eDhzWlBUTEZ6S0NIRENvckV1NTZxOW1iCmNKdllzVC9DSit6K0Y3RnNMSmVKTVVSSkU2b0txcldKelNKbnNqWmNxNEJwRFM2djRkNXRMNHJCZlIyT1JnTVYKQWh3eW5NTFdtdnpDUDJnaVdWY3pUNU5EdXk1UVlxSzltMXh6TDhrQ2dZRUFqVHdEOW1QQjBHM0kxMlhnekxuQwpEeEM2MC9Ba1hyTGl4ODQ2OExHTlJkcVNPbndoSGxtQzNiQkRYZ1k1WWU5Z0VxTHV2cTRvTEF6bDRydkdFWkNNCjZwNTYrRGwvUEVRT1gxSlJoSWtnaDcraWlEWFdPV2dubUQyV1V3SVR5bG1OUnNJckcvYjNKMGpLMlJOTGNqQmgKQ1liR0RxaGtDN29DbloyRjE4MFV0MGc9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROekNDQWgrZ0F3SUJBZ0lVRjQ5Qy9oQzg2VGQ2V2N0cUJWaGViWm1lbjhzd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0t6RVlNQllHQTFVRUF3d1BiWEVnY1hWbGRXVnRZVzVoWjJWeU1ROHdEUVlEVlFRTERBWnBZbTBnYlhFdwpIaGNOTWpJd01qSXhNVFF4TWpReldoY05Nekl3TWpFNU1UUXhNalF6V2pBck1SZ3dGZ1lEVlFRRERBOXRjU0J4CmRXVjFaVzFoYm1GblpYSXhEekFOQmdOVkJBc01CbWxpYlNCdGNUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFOdUxTblRnZERkd0ZjbnI3OTdWdDA5K3JCalNKZ3hNRFZTdHF0ckJSK0k5MkQ5cApTdVZ1VVk5bHROMnFYb2ppVzBoUXVjYWlrQWdUY1o0UW50bCtIeHc0dmxJMVFoRS84Y0FDejdIYWU0RzlhT0JICktlTnVodUc5dTlKTDBUMHFHdVNCL2EvSlJmaUdOOWNNQkxDaU1MQzNqeVpzTmxtYkJtWG9TY2hsaVIza0ZWNmQKSCtjUGhDUnFRelh5V0Y2QVplR0Q5dnQzdlhrWDN6UWd5cHRmMW5VbERzUVJPVTBiaW5TQ2pqMi9jZHJDRUJVcwpDOWE1eUhZbmVkT0podmhpRU90dHJGMWMvb3ZtNE9zYWhXTytzdEJNemtoY09NTzk0RFhyazAvRkpRN2hhbUpuCnRhOHFscHptWGhVSDdLK2FBYnBNcEtNRjRzQU1haFVRcmdUcGNsOENBd0VBQWFOVE1GRXdIUVlEVlIwT0JCWUUKRktlSWdzcnBNLzBmcjlCaTg5Qmh6c0VqOEorUE1COEdBMVVkSXdRWU1CYUFGS2VJZ3NycE0vMGZyOUJpODlCaAp6c0VqOEorUE1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIRlVtdG9xCjVaUWI2cXBnQmdlaGJaVTBTSkpNK2hnOGRMTnVFT25VekxGdTh4eGZjV3kraTloSWU1dXI0M0xjaGtZR09wc2EKSzVGY0dWSVIybkFlSjgrWWY5bUtoUHRjblRzWStzL2VpZGVzdGJkdnE2eFI2RE92ckpQY1FLTlVEcmZUU2RMcwpsZHhCOFdrajY4WWRIUWdFUkN3ZHlvVFEydkVUUmIvb2J4M1ZLSlhid1cybi9xdWxIZ0IwTDJXN3hVa1FWZWdaCkk5eHByU0pEUnVvdGY0WjZuek4yZ3RNQzUzRDRweVlxL2habFlQL1ZMOGV6dFE3bGw0VzM0QWppY2VCdXpLeXgKa04zUEtHYXpJcHRpZ1d6WHhSM2pLTjMremlDVDBaR3BYeHFqbTRvVnFocHA5bTJ2YzdDVmliMzQ3c05rRG5nSgpWeUcvTnpwcS92TldLWGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\n  app.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROekNDQWgrZ0F3SUJBZ0lVYUpUbGgrQ3BBZHlJSFJzbjhVQnYrVWRkTVRJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0t6RVZNQk1HQTFVRUF3d01ZWEJ3YkdsallYUnBiMjR4TVJJd0VBWURWUVFMREFsaGNIQWdkR1ZoYlRFdwpIaGNOTWpJd01qSXhNVFF4TWpReldoY05Nekl3TWpFNU1UUXhNalF6V2pBck1SVXdFd1lEVlFRRERBeGhjSEJzCmFXTmhkR2x2YmpFeEVqQVFCZ05WQkFzTUNXRndjQ0IwWldGdE1UQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFNTFVKbkZNa2R0bWU3SWpLMHBRZWRNMngzTHhWeE1KNGxpZGF6a0U0YXN0ZGhWMgplL295c2MwUloxRXMvTzlmVTZoQU5wTkhzeG1wSWI1OWx6NmorTXpRMzR4Ylgxd0VGbS9EUUdMdElqWFlBL0x4CmVneWp2cUZ6U3pvWDZqa0JtczRCYndHRzY2UHRWVlFFczBuclpNL3J5ZXBiUERidE9uYnQ0QUUvZVRRTXdFRWoKSzVyYTA4WElTRXRhdDc2TXliUG44NkR3Sjk1ZjFmblRQc2E0K3RFT291L2Y2dEkvTUNsMzNhWTZleWxnUWw2Ywp0ZGNvVHJtWlhXVWJmZzJiVk9mM25ZSWJYTlN2S0FRRnNoWnhmdENiSldGVFVFU0RoNmltcXlEN0hZaUdLZGpvCkNSSzJhck5RQXE3SCttb25iVGJJYVg4bnNQS1FhSGJqUWZOaDZ1TUNBd0VBQWFOVE1GRXdIUVlEVlIwT0JCWUUKRkN5cWVBNHV5cksvVDNQZm1TV2I4MVU4WlhFSk1COEdBMVVkSXdRWU1CYUFGQ3lxZUE0dXlySy9UM1BmbVNXYgo4MVU4WlhFSk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLYVNlUzd1CktNaDZGZ1FLR0pkSU1LdlY1bzFUcVZGSEo2REVlb3JnNDNwS295R2prbGNuVFAzbmlMczdWZ3h6Vk9CcVdYY2cKRFYzYmw0NTkrYnFMM2FNRkU2QWFvZW9JejFZeWZQMGkxaC9hakwrM1dYc0ozUWxSL2ptZzFRYjBNVTRNM1IvRwpGSFhPdFFXTVlzMXc2SERPL2hwM1BJU0JOaU80bkxXdTdjcVhtTlF6V2Z6bGVmTy9Nb04xeW1RQWFvNlFNSlFICktET3BWVk9sM1dJVmZoVDBFRStHbmdobmZkaHZnMFhmUzNFZ2IybmVqVHNtNnhpZi9JNjR0Z3p2MjlSR29qQmcKcG9zdlQ4K01hU1dXMDRoQm1KV1pKR0RoN3prbFloQlpFb1RqRjhCQm5GSVpwMEtUQ0thdFhiS3kyVG16VHpCOQpDZzlzR0E1eWJPNUtYWm89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\ntype: Opaque\n")),(0,l.kt)("p",null,"We create the above configmap so we don't persist the configuration. This means that it can be changed with a ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl edit deployment")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"helm upgrade"),". As a configmap its mounted in the container and doesn't become immutable."),(0,l.kt)("p",null,"This configmap will have several certs already encrypted base64 for testing that can always be updated. As another note, the above config map settings for the container will allow access via MQ Explorer using the ",(0,l.kt)("inlineCode",{parentName:"p"},"admin")," user with the password ",(0,l.kt)("inlineCode",{parentName:"p"},"mqpasswd"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mqekspoc_values.yaml"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'# \xa9 Copyright IBM Corporation 2021, 2022\n#\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nlicense: accept\nimage:\n  # repository is the container repository to use\n  repository: <URL FOR AIRGAPPED REPO>/icr.io/ibm-messaging/mq\n  # tag is the tag to use for the container repository\n  tag: latest\n  # pullSecret is the secret to use when pulling the image from a private registry\n  pullSecret: ics-cots-pullsecret\n  # pullPolicy is either IfNotPresent or Always (https://kubernetes.io/docs/concepts/containers/images/)\n  pullPolicy: IfNotPresent\n\nqueueManager:\n  nativeha:\n    enable: false\n    tls:\n      secretName: helmsecure\n  mqscConfigMaps:\n    - name: helmsecure\n      items:\n        - mq.mqsc\n  qminiConfigMaps:\n    - name: helmsecure\n      items:\n        - mq.ini\n  multiinstance:\n    enable: false\n\npersistence:\n  dataPVC:\n    enable: false\n    name: "data"\n    size: 2Gi\n    storageClassName: "ebs-sc"\n  logPVC:\n    enable: false\n    name: "log"\n    size: 2Gi\n    storageClassName: "ebs-sc"\n  qmPVC:\n    enable: true\n    name: "qm"\n    size: 2Gi\n    storageClassName: "ebs-sc"\n\nsecurity:\n  context:\n    fsGroup: 65534\n    supplementalGroups: [65534]\n  initVolumeAsRoot: false\n  runAsUser: 2001\n  runAsGroup: 2001\n\npki:\n  keys:\n    - name: default\n      secret:\n        secretName: helmsecure\n        items:\n          - tls.key\n          - tls.crt\n  trust:\n    - name: default\n      secret:\n        secretName: helmsecure\n        items:\n          - app.crt\nmetadata:\n  annotations:\n    productName: "IBM MQ Advanced for Developers"\n    productID: "2f886a3eefbe4ccb89b2adb97c78b9cb"\n    productChargedContainers: ""\n    productMetric: "FREE"\nroute:\n  nodePort:\n    webconsole: true\n    mqtraffic: true\n  loadBalancer:\n    webconsole: true\n    mqtraffic: true\n    awslbscheme: # Can be "internal" or "internet-facing". Defaults to "internet-facing" if not defined here. Only really applicable in AWS EKS.\n    loadBalancerSourceRanges: [] # This allows to lock your allowed traffic from specific subnets\n  ingress:\n    webconsole: \n      enable: false\n      hostname: \n      path: /\n      tls: \n        enable: false \n        secret: \n    mqtraffic: \n      enable: false\n      hostname: \n      path: /\n      tls: \n        enable: false\n        secret: \n    \n')),(0,l.kt)("p",null,"Extra settings above allow for using an ",(0,l.kt)("inlineCode",{parentName:"p"},"ingress")," in AWS specifically, but will probably work in plain kubernetes."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Log into AWS EKS via CLI ",(0,l.kt)("a",{parentName:"li",href:"https://aws.amazon.com/premiumsupport/knowledge-center/eks-cluster-connection/"},"ref"))),(0,l.kt)("p",null,"Set our context so we're in the correct namespace (if we aren't) and apply mtlsqm.yaml"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"kubectl config set-context --current --namespace=$TARGET_NAMESPACE\nkubectl apply -f mtlsqm.yaml\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Now install the helm chart")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'helm install mqekspoc ibm-messaging-mq/ibm-mq \\\n-f mqekspoc_values.yaml \\\n--set "queueManager.envVariables[0].name=MQ_ADMIN_PASSWORD" \\\n--set "queueManager.envVariables[0].value=mqpasswd" \\\n--set "queueManager.envVariables[1].name=MQ_APP_PASSWORD" \\\n--set "queueManager.envVariables[1].value=mqpasswd"\n\nNAME: mqekspoc\nLAST DEPLOYED: Tue Jan 10 16:08:43 2023\nNAMESPACE: \nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES:\nGet the MQ Console URL by running these commands:\n  export CONSOLE_PORT=$(kubectl get services mqekspoc-ibm-mq-web -n mq-eks -o jsonpath="{.spec.ports[?(@.port=="9443")].nodePort}")\n  export CONSOLE_IP=$(kubectl get nodes -o jsonpath=\'{..addresses[1].address}\' | awk \'{print $1}\')\n  echo https://$CONSOLE_IP:$CONSOLE_PORT/ibmmq/console\n\nGet the load balancer exposed MQ Console URL by running these commands:\n  export CONSOLE_PORT=9443\n  export CONSOLE_IP=$(kubectl get services mqekspoc-ibm-mq-loadbalancer -n mq-eks -o jsonpath="{..hostname}")$(kubectl get services mqekspoc-ibm-mq-loadbalancer -n mq-eks -o jsonpath="{..ip}")\n  echo https://$CONSOLE_IP:$CONSOLE_PORT/ibmmq/console\nThe MQ connection information for clients inside the cluster is as follows:\n  mqekspoc-ibm-mq:1414\n')),(0,l.kt)("p",null,"Following the returned prompts above, you should be able to retrieve the webui url."),(0,l.kt)("p",null,"User/pass: ",(0,l.kt)("inlineCode",{parentName:"p"},"admin/mqpasswd")),(0,l.kt)("p",null,"This will deploy a number of resources:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A configMap with MQ configuration to define a default Queue, and the security required."),(0,l.kt)("li",{parentName:"ul"},"A secret that includes certificates and keys from the ",(0,l.kt)("inlineCode",{parentName:"li"},"genericresources/createcerts")," directory. Assuring the communication in MQ is secure.\nThis will take a minute or so to deploy, and the status can be checked with the following command: ",(0,l.kt)("inlineCode",{parentName:"li"},"kubectl get pods | grep secureapp"),". If you've enabled ",(0,l.kt)("inlineCode",{parentName:"li"},"nativeha")," with a ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," value, then three pods will be generated. Wait until one of the three Pods is showing ",(0,l.kt)("inlineCode",{parentName:"li"},"1/1")," under the ready status (only one will ever show this, the remainding two will be ",(0,l.kt)("inlineCode",{parentName:"li"},"0/1")," showing they are replicas). If ",(0,l.kt)("inlineCode",{parentName:"li"},"nativeha")," is set to ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),", only one pod will come up.")),(0,l.kt)("p",null,"verify the pods are up. If we enabled nativeha in our values you should see three. Otherwise just one."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"kubectl get pods\nNAME                     READY   STATUS    RESTARTS   AGE\nsecureapphelm-ibm-mq-0   1/1     Running   0          25m\nsecureapphelm-ibm-mq-1   0/1     Running   0          25m\nsecureapphelm-ibm-mq-2   0/1     Running   0          25m\n")))}m.isMDXComponent=!0}}]);